{"version":3,"sources":["App.js","Search.js","reportWebVitals.js","index.js"],"names":["App","className","Search","props","state","data","key","results","handleChange","bind","this","getData","fetch","then","response","json","jsonData","console","log","setState","catch","error","event","arr","forEach","item","keywords","includes","target","value","push","map","elem","index","title","body","id","for","onChange","renderTableData","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAQeA,MANf,WACE,OACE,qBAAKC,UAAU,S,mCCFEC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,IAAK,GACLC,QAAS,IAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARL,E,gEAYfC,KAAKC,Y,gCAGE,IAAD,OACNC,MAAM,2EACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAEHC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVd,KAAMW,OAGbI,OAAM,SAACC,GAEJJ,QAAQI,MAAMA,Q,mCAIbC,GACT,IAAIC,EAAM,GACVb,KAAKN,MAAMC,KAAKmB,SAAQ,SAAAC,GAChBA,EAAKC,SAASC,SAASL,EAAMM,OAAOC,QACpCN,EAAIO,KAAKL,MAGjBf,KAAKS,SAAS,CACVb,IAAKgB,EAAMM,OAAOC,MAClBtB,QAASgB,M,wCAKb,OAAOb,KAAKN,MAAMG,QAAQwB,KAAI,SAACC,EAAMC,GAAW,IACrCC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KACf,OACG,+BACG,6BAAKD,IACL,6BAAKC,MAFCF,Q,+BAWf,OAFAhB,QAAQC,IAAI,OAAQR,KAAKN,MAAMC,MAG3B,sBAAK+B,GAAG,SAAR,UACI,sBAAKA,GAAG,YAAR,UACI,uBAAOC,IAAI,OAAX,yBACA,uBAAOD,GAAG,OAAOE,SAAU5B,KAAKF,kBAEpC,8BACA,uBAAO4B,GAAG,UAAV,SACI,gCACK1B,KAAK6B,+B,GArEMC,IAAMC,WCU3BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5a48aaa1.chunk.js","sourcesContent":["import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\"></div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport default class Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            key: \"\",\r\n            results: []\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        fetch('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000')\r\n            .then(response => response.json())\r\n            .then((jsonData) => {\r\n                // jsonData is parsed json object received from url\r\n                console.log(jsonData);\r\n                this.setState({\r\n                    data: jsonData\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                // handle your errors here\r\n                console.error(error)\r\n            });\r\n    }\r\n\r\n    handleChange(event) {\r\n        var arr = [];\r\n        this.state.data.forEach(item => {\r\n            if (item.keywords.includes(event.target.value)) {\r\n                arr.push(item);\r\n            }\r\n        });\r\n        this.setState({\r\n            key: event.target.value,\r\n            results: arr\r\n        });\r\n    }\r\n\r\n    renderTableData() {\r\n        return this.state.results.map((elem, index) => {\r\n           const { title, body } = elem //destructuring\r\n           return (\r\n              <tr key={index}>\r\n                 <td>{title}</td>\r\n                 <td>{body}</td>\r\n              </tr>\r\n           )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(\"test\", this.state.data);\r\n        \r\n        return (\r\n            <div id=\"search\">\r\n                <div id=\"searchbar\">\r\n                    <label for=\"item\">Enter item:</label>\r\n                    <input id=\"item\" onChange={this.handleChange}></input>\r\n                </div>\r\n                <div>\r\n                <table id='results'>\r\n                    <tbody>\r\n                        {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Search from './Search';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Search />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}